// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distributionalDistDiscrete
Rcpp::NumericVector distributionalDistDiscrete(Rcpp::IntegerVector X1, Rcpp::IntegerVector X2);
RcppExport SEXP _distributionalDist_distributionalDistDiscrete(SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(distributionalDistDiscrete(X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// distributionalDistContinuous
Rcpp::NumericVector distributionalDistContinuous(Rcpp::NumericVector X1, Rcpp::NumericVector X2, Rcpp::NumericVector nM);
RcppExport SEXP _distributionalDist_distributionalDistContinuous(SEXP X1SEXP, SEXP X2SEXP, SEXP nMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nM(nMSEXP);
    rcpp_result_gen = Rcpp::wrap(distributionalDistContinuous(X1, X2, nM));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_distributionalDist_distributionalDistDiscrete", (DL_FUNC) &_distributionalDist_distributionalDistDiscrete, 2},
    {"_distributionalDist_distributionalDistContinuous", (DL_FUNC) &_distributionalDist_distributionalDistContinuous, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_distributionalDist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
